name: Build and publish docker images
on:
  pull_request:
    branches: [ main ]
  schedule:
    - cron: '1 8 * * *'
  workflow_dispatch:

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  docker-image:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        image_name: [rmf_from_src]
        base_image: ["ros:humble", "ghcr.io/${{ github.repository_owner }}/ros_rpm:latest"]
        flavor: [base_build_tools, source_rosdep, source_built]
        include:
          - image_name: rmf_from_packages
            pack: rpm
            base_image: ghcr.io/${{ github.repository_owner }}/ros_rpm:latest
          - image_name: rmf_from_packages
            pack: deb
            base_image: ros:humble

    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Log in to the Container registry
        uses: docker/login-action@v1
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v3
        with:
          images: ${{ env.REGISTRY }}/${{ github.repository }}/${{ matrix.image_name }}

      - name: sortening_var_names
        id: vars
        run: |
          echo ::set-output name=image::$(echo '{ "rmf_from_src": "src", "rmf_from_packages": "bin" }' | jq -r 'to_entries[] | select(.key=="${{ matrix.image_name }}") | .value')
          echo ::set-output name=base::$(echo '{ "ros:humble": "ub", "ghcr.io/${{ github.repository_owner }}/ros_rpm:latest": "rh" }' | jq -r 'to_entries[] | select(.key=="${{ matrix.base_image }}") | .value')
          echo ::set-output name=flavor::$(echo '{ "base_build_tools": "tools", "source_rosdep": "rosdep", "source_built": "built" }' | jq -r 'to_entries[] | select(.key=="${{ matrix.flavor }}") | .value')
      - name: Build and push Docker image
        uses: docker/build-push-action@v2
        with:
          context: dockers
          file: dockers/${{ matrix.image_name }}.Dockerfile
#          push: ${{ github.event_name == 'push' || github.event_name == 'schedule' }}
          push: true
          tags: ${{ env.REGISTRY }}/${{ github.repository_owner }}/${{steps.vars.outputs.image }}${{steps.vars.outputs.base}}${{steps.vars.outputs.flavor}}:latest
          labels: ${{ steps.meta.outputs.labels }}
          build-args: |
            PACK=${{ matrix.pack }}
            BASE_IMAGE=${{ matrix.base_image }}
            RMF_IMAGE=${{matrix.flavor}}
